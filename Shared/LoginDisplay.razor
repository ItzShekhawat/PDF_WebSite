@inject HttpClient httpClient



<AuthorizeView>
    <Authorized>
        <MudText Style="width: contain; display: flex; align-items: center; margin: 0 10px ; ">Welcome @context.User.Identity.Name ! </MudText>
        <!-- Solamente chi ha l'accesso da Admin può visualizzare queste funzionalità -->
        @if (context.User.IsInRole("Admin"))
        {
            <!-- Questa select serve al programma per sapere quale cartella è stata aggioranta dall'Amdin e così aggiornare i file ed eventualmente eliminare file non più esistenti dal DB      
            <MudSelect  xs="12" sm="6" md="3" T="string" Label="Catella da Aggiornare" @bind-Value="selected_update_Client" OffsetY="true">
                @foreach (var client in ClientsList)
                {

                    <MudSelectItem Value="client.Split('\\').Last()"></MudSelectItem>
                }
            </MudSelect>
            -->

            <MudButton Disabled="@_processing" OnClick="(()=>Logging_Admin_Updates(context.User.Identity.Name, Log_String))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Warning" Style="color: white; margin: 0 5px; font-size: 15px; font-family: Marlett;" FullWidth="false">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2" Style="color:lightgray">Updating...</MudText>
                }
                else
                { 
                    <MudText>Update</MudText>
                }
            </MudButton>
        }
        <MudButton Class="btn-link btn" StartIcon="@Icons.Material.Filled.Logout" Color="Color.Info" Link="MicrosoftIdentity/Account/SignOut" Style="color:white; font-size:18px; font-family:Marlett;">
            LogOut
        </MudButton>
    </Authorized>
</AuthorizeView>

@code{        
    // Aggioranmento Futuro 
    public string selected_update_Client { get; set; }
    //-------------------------------------------------
    #region "Admin Update Btn Staff"
    private bool _processing = false;
    List<string> InfoList = new();
    List<string> ClientsList = new List<string>();
    List<string> OrdersList;
    List<string> SuborderList;
    List<string> PDFList;
    List<string> PDF_files;
    string encodePath;
    string root_path = @"\\itcar1-ss1\Disegni\SPAC\Commesse";
    string api_url = GlobalStorage.APIurl;
    string Log_String = " on " + DateTime.Now.ToString("g") + " Updated the DB";
    #endregion

    protected override async Task OnInitializedAsync()
    {
        encodePath = Uri.EscapeDataString(root_path);
        ClientsList = await httpClient.GetFromJsonAsync<List<string>>(api_url+@"/?F_path=" + encodePath);
    }
    

    // Questa functione scrive i logs ( messaggi ) su un file( crea se non esiste)
    public async Task Logging_Admin_Updates(string Admin , string strLog)
    {
        string file_Name = "Admin_Updates";
        string logFilePath = Path.Combine(Directory.GetCurrentDirectory(), @"Logs\" + file_Name + ".txt");
        FileInfo logFileInfo = new(logFilePath);
        DirectoryInfo logDirInfo = new(logFileInfo.DirectoryName);
        if (!logDirInfo.Exists) logDirInfo.Create();
        using (FileStream fileStream = new(logFilePath, FileMode.Append))
        {
            using StreamWriter log = new(fileStream);
            log.WriteLine(Admin + strLog);
        }

        await ProcessUpdate();
    }


    // Let me Explane this ProcessUpdate Function  >>>>>>
    //
    // 1) First of all, it takes the list of Folders o Files in the Path that I pass him (ex : S:\SPAC\Commesse )
    // 2) then it passes this list to an API , that will save each element of the list in the DB.
    // 3) Now the code iterate on the list and starts from point 1

    // Traduzione ( non letterale ) 

    // 1) E' una funzione a ciclo che prende dal API la lista dei percorsi (ex : S:\SPAC\Commesse )
    // 2) E per ogni percorso lo aggiorna sul DB e poi ricava la lista di elementi che contiene
    // 3) Si riparte del prima posto
    // Code Done >>>>>>
    public async Task ProcessUpdate()
    {
        _processing = true;
        string[] slash_path;
        string F_name = "";

        string json_User = JsonConvert.SerializeObject(ClientsList);


        // Preparing the httpRequestMessage to handle my request
        HttpRequestMessage httpRequestMessage = new();
        httpRequestMessage.Method = new HttpMethod("POST");
        httpRequestMessage.RequestUri = new Uri(api_url+@"/upDir?TableName=client&doUpdate=true");
        httpRequestMessage.Content = new StringContent(json_User);
        httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

        var response = await httpClient.SendAsync(httpRequestMessage);

        var responseStatusCode = response.StatusCode;

        if (responseStatusCode.ToString() == "OK")
        {
            response.Dispose();

            foreach (var client in ClientsList)
            {
                encodePath = Uri.EscapeDataString(client);
                OrdersList = await httpClient.GetFromJsonAsync<List<string>>(api_url+@"/?F_path=" + encodePath);
                json_User = JsonConvert.SerializeObject(OrdersList);
                Console.WriteLine(json_User);
                HttpRequestMessage httpRequestMessageOrder = new();
                httpRequestMessageOrder.Method = new HttpMethod("POST");
                httpRequestMessageOrder.RequestUri = new Uri(api_url+@"/upDir?TableName=orders&doUpdate=true");
                httpRequestMessageOrder.Content = new StringContent(json_User);
                httpRequestMessageOrder.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                response = await httpClient.SendAsync(httpRequestMessageOrder);

                responseStatusCode = response.StatusCode;
                if (responseStatusCode.ToString() == "OK")
                {
                    response.Dispose();

                    foreach (var order in OrdersList)
                    {

                        encodePath = Uri.EscapeDataString(order);
                        SuborderList = await httpClient.GetFromJsonAsync<List<string>>(api_url+@"/?F_path=" + encodePath);
                        json_User = JsonConvert.SerializeObject(SuborderList);
                        HttpRequestMessage httpRequestMessageSub = new();
                        httpRequestMessageSub.Method = new HttpMethod("POST");
                        httpRequestMessageSub.RequestUri = new Uri(api_url+@"/upDir?TableName=suborder&doUpdate=true");
                        httpRequestMessageSub.Content = new StringContent(json_User);
                        httpRequestMessageSub.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                        response = await httpClient.SendAsync(httpRequestMessageSub);

                        responseStatusCode = response.StatusCode;
                        if (responseStatusCode.ToString() == "OK")
                        {
                            response.Dispose();

                            foreach (var suborder in SuborderList)
                            {
                                encodePath = Uri.EscapeDataString(suborder);
                                PDFList = await httpClient.GetFromJsonAsync<List<string>>(api_url+@"/?F_path=" + encodePath);


                                json_User = JsonConvert.SerializeObject(PDFList);
                                HttpRequestMessage httpRequestMessagePDF = new();
                                httpRequestMessagePDF.Method = new HttpMethod("POST");
                                httpRequestMessagePDF.RequestUri = new Uri(api_url+@"/upDir?TableName=pdf&doUpdate=true");
                                httpRequestMessagePDF.Content = new StringContent(json_User);
                                httpRequestMessagePDF.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                                response = await httpClient.SendAsync(httpRequestMessagePDF);

                                responseStatusCode = response.StatusCode;
                                if (responseStatusCode.ToString() == "OK")
                                {
                                    response.Dispose();

                                    foreach (var pdf in PDFList)
                                    {
                                        slash_path = pdf.Trim().Split(@"\");
                                        F_name = slash_path.Last();
                                        if (F_name.Contains("PDF") || F_name.Contains("pdf"))
                                        {
                                            encodePath = Uri.EscapeDataString(pdf);
                                            PDF_files = await httpClient.GetFromJsonAsync<List<string>>(api_url+@"/?F_path=" + encodePath);

                                            json_User = JsonConvert.SerializeObject(PDF_files);
                                            HttpRequestMessage httpRequestMessagePDF_File = new();
                                            httpRequestMessagePDF_File.Method = new HttpMethod("POST");
                                            httpRequestMessagePDF_File.RequestUri = new Uri(@"https://localhost:44315/upFile?doUpdate=true");
                                            httpRequestMessagePDF_File.Content = new StringContent(json_User);
                                            httpRequestMessagePDF_File.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                                            response = await httpClient.SendAsync(httpRequestMessagePDF_File);

                                            responseStatusCode = response.StatusCode;
                                            if (responseStatusCode.ToString() == "OK")
                                            {
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            continue;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }
        _processing = false;
    }

    private async Task DeleteOldFiles()
    {

    }

}